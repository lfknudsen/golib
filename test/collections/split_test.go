package collections

import (
	"math"
	"testing"

	. "github.com/lfknudsen/golib/src/collections"
)

// Recall that negative numbers are stored using two's complement: (https://en.wikipedia.org/wiki/Two%27s_complement).
// In Go, conversion from a signed to an unsigned number does not seem to mess with the underlying bits
// in any way (other than potentially truncating them)
func TestSplit64_Left(t *testing.T) {
	tests := []struct {
		name string
		s    Split64
		want int32
	}{
		{"Left =           0; Right =           0",
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, 0},
		{"Left =           0; Right =           1",
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001, 0},
		{"Left =          -1; Right =           0",
			0b1111_1111_1111_1111_1111_1111_1111_1111_0000_0000_0000_0000_0000_0000_0000_0000, -1},
		{"Left = -2147483648; Right =           0",
			0b1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, math.MinInt32},
		{"Left = -2147483648; Right =  2147483647",
			0b1000_0000_0000_0000_0000_0000_0000_0000_0111_1111_1111_1111_1111_1111_1111_1111, math.MinInt32},
		{"Left = -2147483648; Right = -2147483648",
			0b1000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000, math.MinInt32},
		{"Left =          -1; Right =  2147483647",
			0b1111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111, -1},
		{"Left =  2147483647; Right =  2147483647",
			0b0111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111, math.MaxInt32},
		{"Left =  2147483647; Right =          -1",
			0b0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111, math.MaxInt32},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.s.Left(); got != tt.want {
				t.Errorf("Left() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSplit64_Right(t *testing.T) {
	tests := []struct {
		name string
		s    Split64
		want int32
	}{
		{"Left =           0; Right =           0",
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, 0},
		{"Left =           0; Right =           1",
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001, 1},
		{"Left =          -1; Right =           0",
			0b1111_1111_1111_1111_1111_1111_1111_1111_0000_0000_0000_0000_0000_0000_0000_0000, 0},
		{"Left = -2147483648; Right =           0",
			0b1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, 0},
		{"Left = -2147483648; Right =  2147483647",
			0b1000_0000_0000_0000_0000_0000_0000_0000_0111_1111_1111_1111_1111_1111_1111_1111, math.MaxInt32},
		{"Left = -2147483648; Right = -2147483648",
			0b1000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000, math.MinInt32},
		{"Left =          -1; Right =  2147483647",
			0b1111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111, math.MaxInt32},
		{"Left =  2147483647; Right =  2147483647",
			0b0111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111, math.MaxInt32},
		{"Left =  2147483647; Right =          -1",
			0b0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111, -1},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.s.Right(); got != tt.want {
				t.Errorf("Right() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSplit64_SetLeft(t *testing.T) {
	type args struct {
		val int32
	}
	tests := []struct {
		name string
		s    Split64
		args args
		want Split64
	}{
		{"Left =           0; Right =           0",
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, args{0},
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000},
		{"Left =           0; Right =           1",
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001, args{1},
			0b0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0001},
		{"Left =          -1; Right =           0",
			0b1111_1111_1111_1111_1111_1111_1111_1111_0000_0000_0000_0000_0000_0000_0000_0000, args{0},
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000},
		{"Left = -2147483648; Right =           0",
			0b1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, args{0},
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000},
		{"Left = -2147483648; Right =  2147483647",
			0b1000_0000_0000_0000_0000_0000_0000_0000_0111_1111_1111_1111_1111_1111_1111_1111, args{math.MaxInt32},
			0b0111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111},
		{"Left = -2147483648; Right = -2147483648",
			0b1000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000, args{math.MinInt32},
			0b1000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000},
		{"Left =          -1; Right =  2147483647",
			0b1111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111, args{math.MaxInt32},
			0b0111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111},
		{"Left =  2147483647; Right =  2147483647",
			0b0111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111, args{math.MaxInt32},
			0b0111_1111_1111_1111_1111_1111_1111_1111_0111_1111_1111_1111_1111_1111_1111_1111},
		{"Left =  2147483647; Right =          -1",
			0b0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111, args{-1},
			0b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.s.SetLeft(tt.args.val); got != tt.want {
				t.Errorf("SetLeft() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSplit64_SetRight(t *testing.T) {
	type args struct {
		val int32
	}
	tests := []struct {
		name string
		s    Split64
		args args
		want Split64
	}{
		{"Left =           0; Right =           0",
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, args{0},
			0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000},
		{"Left =           1; Right =           0",
			0b0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0000, args{1},
			0b0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0001},
		{"Left =          -1; Right =           0",
			0b1111_1111_1111_1111_1111_1111_1111_1111_0000_0000_0000_0000_0000_0000_0000_0000, args{0},
			0b1111_1111_1111_1111_1111_1111_1111_1111_0000_0000_0000_0000_0000_0000_0000_0000},
		{"Left = -2147483648; Right =          -1",
			0b1000_0000_0000_0000_0000_0000_0000_0000_1111_1111_1111_1111_1111_1111_1111_1111, args{0},
			0b1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000},
		{"Left = -2147483648; Right = -2147483648",
			0b1000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000, args{math.MaxInt32},
			0b1000_0000_0000_0000_0000_0000_0000_0000_0111_1111_1111_1111_1111_1111_1111_1111},
		{"Left = -2147483648; Right = -2147483648",
			0b1000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000, args{math.MinInt32},
			0b1000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.s.SetRight(tt.args.val); got != tt.want {
				t.Errorf("SetRight() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSplit64_String(t *testing.T) {
	tests := []struct {
		name string
		s    Split64
		want string
	}{
		{"Left =           0; Right =           0",
			math.MaxUint64, "< -1 | -1 >"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.s.String(); got != tt.want {
				t.Errorf("String() = %v, want %v", got, tt.want)
			}
		})
	}
}
